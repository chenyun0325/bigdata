# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import core_function_pb2 as core__function__pb2


class DataxCommandCallStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.datax_command_call = channel.unary_unary(
        '/DataxCommandCall/datax_command_call',
        request_serializer=core__function__pb2.FileInfo.SerializeToString,
        response_deserializer=core__function__pb2.Result.FromString,
        )


class DataxCommandCallServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def datax_command_call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DataxCommandCallServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'datax_command_call': grpc.unary_unary_rpc_method_handler(
          servicer.datax_command_call,
          request_deserializer=core__function__pb2.FileInfo.FromString,
          response_serializer=core__function__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DataxCommandCall', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MysqlDumpCommandCallStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.mysqldump_command_call = channel.unary_unary(
        '/MysqlDumpCommandCall/mysqldump_command_call',
        request_serializer=core__function__pb2.MysqlInfo.SerializeToString,
        response_deserializer=core__function__pb2.Result.FromString,
        )


class MysqlDumpCommandCallServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def mysqldump_command_call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MysqlDumpCommandCallServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'mysqldump_command_call': grpc.unary_unary_rpc_method_handler(
          servicer.mysqldump_command_call,
          request_deserializer=core__function__pb2.MysqlInfo.FromString,
          response_serializer=core__function__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MysqlDumpCommandCall', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PiecesDefectsProcessStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.pieces_defects_ftp_downloader = channel.unary_unary(
        '/PiecesDefectsProcess/pieces_defects_ftp_downloader',
        request_serializer=core__function__pb2.Nonetype.SerializeToString,
        response_deserializer=core__function__pb2.Result.FromString,
        )
    self.pieces_defects_main_process = channel.unary_unary(
        '/PiecesDefectsProcess/pieces_defects_main_process',
        request_serializer=core__function__pb2.Nonetype.SerializeToString,
        response_deserializer=core__function__pb2.Result.FromString,
        )


class PiecesDefectsProcessServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def pieces_defects_ftp_downloader(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def pieces_defects_main_process(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PiecesDefectsProcessServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'pieces_defects_ftp_downloader': grpc.unary_unary_rpc_method_handler(
          servicer.pieces_defects_ftp_downloader,
          request_deserializer=core__function__pb2.Nonetype.FromString,
          response_serializer=core__function__pb2.Result.SerializeToString,
      ),
      'pieces_defects_main_process': grpc.unary_unary_rpc_method_handler(
          servicer.pieces_defects_main_process,
          request_deserializer=core__function__pb2.Nonetype.FromString,
          response_serializer=core__function__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PiecesDefectsProcess', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
